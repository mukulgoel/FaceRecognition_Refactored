package imagecomputation;

import java.awt.*;
import java.awt.image.*;

class ImageCanvas extends Canvas {

	/**
	 * AutoGenerated seriealVersionUID
	 */
	private static final long serialVersionUID = -7635148635367922726L;
	private static final int GREEN = 8 /* G */;
	private static final int RED = 16 /* R */;

	private Image memImage = null; // image constructed from PPM data
	private int pix[];

	public void readImage(byte[] bytes, int width, int height) {

		pix = new int[width * height];
		int index = 0;
		int offset = 0;

		for (index = 0; index < pix.length - 2; index++) {
			pix[index] = 255 << 24 /* alpha */
					| (int) (bytes[offset] & 0xFF) << RED
					| (int) (bytes[offset] & 0xFF) << GREEN
					| (int) (bytes[offset] & 0xFF) /* B */;
			offset += 1;
		}

		memImage = createImage(new MemoryImageSource(width, height, pix, 0,
				width));
		repaint();
	}

	public void readImage(double[] doubles, int width, int height) {

		pix = new int[width * height];
		int index = 0;
		int avg = 0;
		for (index = 0; index < pix.length - 2; index++) {
			avg = (int) doubles[index];
			pix[index] = 255 << 24 | avg;
		}

		memImage = createImage(new MemoryImageSource(width, height, pix, 0,
				width));
		repaint();
	}

	public void readImage(int[] ints, int width, int height) {
		memImage = createImage(new MemoryImageSource(width, height, ints, 0,
				width));
		repaint();
	}

	public void paint(Graphics imageGraphic) {
		Dimension d = getSize(); // get size of drawing area

		imageGraphic.setColor(getBackground()); // clear drawing area
		imageGraphic.fillRect(0, 0, d.width, d.height);
		imageGraphic.setColor(getForeground());

		if (memImage != null) {
			imageGraphic.drawImage(memImage, 0, 0, this);
		}
	}
}
